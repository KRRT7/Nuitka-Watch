dask.array<random_sample, shape=(10000, 10000), dtype=float64, chunksize=(1000, 1000), chunktype=numpy.ndarray>
dask.array<mean_agg-aggregate, shape=(5000,), dtype=float64, chunksize=(500,), chunktype=numpy.ndarray>
<xarray.DataArray (time: 4, space: 3)> Size: 96B
array([[0.77558824, 0.865817  , 0.17369944],
       [0.5913104 , 0.79689628, 0.99215323],
       [0.69773799, 0.3357912 , 0.648453  ],
       [0.36216755, 0.05373484, 0.34626172]])
Coordinates:
  * time     (time) datetime64[ns] 32B 2000-01-01 2000-01-02 ... 2000-01-04
  * space    (space) <U2 24B 'IA' 'IL' 'IN'
                         name    id         x         y
timestamp                                              
2000-01-01 00:00:00    Ursula  1035 -0.239020  0.671623
2000-01-01 00:00:01  Patricia  1066  0.496151 -0.196231
2000-01-01 00:00:02    Hannah  1029 -0.563011  0.233115
2000-01-01 00:00:03     Alice  1021  0.684154 -0.361963
2000-01-01 00:00:04    Oliver  1002  0.788482  0.409464
name    string[pyarrow]
id                int64
x               float64
y               float64
dtype: object
                         name    id     x     y
timestamp                                      
2000-01-01 00:00:00    Ursula  1035 -0.24  0.67
2000-01-01 00:00:01  Patricia  1066  0.50 -0.20
2000-01-01 00:00:02    Hannah  1029 -0.56  0.23
Dask Series Structure:
npartitions=1
    float64
        ...
Dask Name: getitem, 8 expressions
Expr=(((Filter(frame=ArrowStringConversion(frame=FromMap(b54c7e3)), predicate=ArrowStringConversion(frame=FromMap(b54c7e3))['y'] > 0))[['name', 'x']]).std(ddof=1, numeric_only=False, split_out=None, observed=False))['x']
name
Bob         0.58
Dan         0.58
Edith       0.58
George      0.58
Hannah      0.58
            ... 
Patricia    0.58
Tim         0.58
Ursula      0.58
Victor      0.58
Xavier      0.58
Name: x, Length: 26, dtype: float64
               x    y
name                 
Ingrid   -236.31  1.0
Kevin      99.61  1.0
Patricia  -34.61  1.0
Alice     -36.22  1.0
Sarah     234.36  1.0
...          ...  ...
Dan        20.92  1.0
Tim        21.36  1.0
Xavier   -126.71  1.0
Quinn    -122.16  1.0
Oliver    202.83  1.0

[26 rows x 2 columns]
                         name    id  ...  x_aggregated  y_aggregated
timestamp                            ...                            
2000-01-01 00:00:00    Ursula  1035  ...       -127.96           1.0
2000-01-01 00:00:01  Patricia  1066  ...        -34.61           1.0
2000-01-01 00:00:02    Hannah  1029  ...       -172.73           1.0
2000-01-01 00:00:03     Alice  1021  ...        -36.22           1.0
2000-01-01 00:00:04    Oliver  1002  ...        202.83           1.0

[5 rows x 6 columns]
                            x         y
timestamp                              
2000-01-01 00:00:00 -1.20e-02 -1.48e-02
2000-01-01 01:00:00 -3.48e-03 -1.70e-02
2000-01-01 02:00:00  8.17e-03 -5.84e-03
2000-01-01 03:00:00 -7.67e-03 -7.14e-03
2000-01-01 04:00:00  9.07e-03  3.88e-03
[[-1.06377997  0.67640868  1.06935647 -0.21758002  0.46021477 -0.39916689
  -0.07918751  1.20938491 -0.78531472 -0.17218611 -1.08535744 -0.99311895
   0.30693511  0.06405769 -1.0542328  -0.52749607 -0.0741832  -0.35562842
   1.05721416 -0.90259159]
 [ 0.0708476  -1.69528125  2.44944917 -0.5304942  -0.93296221  2.86520354
   2.43572851 -1.61850016  1.30071691  0.34840246  0.54493439  0.22532411
   0.60556322 -0.19210097 -0.06802699  0.9716812  -1.79204799  0.01708348
  -0.37566904 -0.62323644]
 [ 0.94028404 -0.49214582  0.67795602 -0.22775445  1.40175261  1.23165333
  -0.77746425  0.01561602  1.33171299  1.08477266 -0.97805157 -0.05012039
   0.94838552 -0.17342825 -0.47767184  0.76089649  1.00115812 -0.06946407
   1.35904607 -1.18958963]
 [-0.29951677  0.75988955  0.18280267 -1.55023271  0.33821802  0.36324148
  -2.10052547 -0.4380675  -0.16639343 -0.34083531  0.42435643  1.17872434
   2.8314804   0.14241375 -0.20281911  2.40571546  0.31330473  0.40435568
  -0.28754632 -2.8478034 ]
 [-2.63062675  0.23103376  0.04246253  0.47885055  1.54674163  1.6379556
  -1.53207229 -0.73444479  0.46585484  0.4738362   0.98981401 -1.06119392
  -0.88887952  1.23840892 -0.57282854 -1.27533949  1.0030065  -0.47712843
   0.09853558  0.52780407]]
GridSearchCV(cv=3,
             estimator=SVC(gamma='auto', probability=True, random_state=0),
             n_jobs=-1,
             param_grid={'C': [0.001, 0.01, 0.1, 0.5, 1.0, 2.0, 5.0, 10.0],
                         'kernel': ['rbf', 'poly', 'sigmoid'],
                         'shrinking': [True, False]})
   mean_fit_time  std_fit_time  ...  std_test_score  rank_test_score
0           0.09      8.13e-03  ...        7.04e-04               41
1           0.10      7.94e-03  ...        7.04e-04               41
2           0.04      2.40e-03  ...        7.04e-04               41
3           0.04      8.81e-04  ...        7.04e-04               41
4           0.11      6.29e-03  ...        7.04e-04               41

[5 rows x 14 columns]
[0 1 1 1 0]
KMeans(init_max_iter=2, n_clusters=3, oversampling_factor=10)
